<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-22T11:12:18.474Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golange-Mutex</title>
    <link href="http://example.com/58432/"/>
    <id>http://example.com/58432/</id>
    <published>2022-02-22T06:40:30.000Z</published>
    <updated>2022-02-22T11:12:18.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>互斥锁是在并发程序中对共享资源进行访问控制的主要手段，对此go 语言提供了Mutex，Mutex为一结构体类型，对外暴露Lock() 和 Unlock() 两个方法，分别用于加锁和解锁。</p></blockquote><ol><li>Mutex 的数据结构</li></ol><ul><li><p>Mutex的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Mutex <span class="keyword">struct</span> &#123;</span><br><span class="line">  state <span class="keyword">int32</span></span><br><span class="line">  sema <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>Mutex.state 表示互斥锁的状态，比如是否被锁定等；</p></li><li><p>Mutex.sema 表示信号量，协程阻塞等待该信号量，解锁的协程释放信号量从而唤醒等待信号量的协程。</p></li><li><p>Mutex 的内存布局如图![image-20220222173645793](/Users/hanzhaoqing/Library/Application Support/typora-user-images/image-20220222173645793.png)</p><ul><li>Locked： 表示该Mutex是否已被锁定，0表示没有锁定，1表示已经锁定；</li><li>Woken： 表示是否有协程已被唤醒，0表示没有，1表示已有协程唤醒，正在加锁过程中；</li><li>Straving：表示该Mutex是否处于饥饿状态，0表示没有，1表示饥饿状态，说明有协程阻塞超过1ms；</li><li>Waiter：表示阻塞等待锁的协程个数，协程解锁是根据此值来判断是否需要释放信号量。</li></ul><p>协程之间的抢锁实际上是争抢给Locked赋值的权利，能给Locked置为1，说明抢到锁。否则就阻塞等待Muted.sema 信号量，一旦持有锁的协程释放锁，那么等待的协程会依次被唤醒。</p></li></ul></blockquote></li></ul><ol start="2"><li><p>加解锁过程</p><ul><li><p>简单加锁：</p><ul><li>假设当前只有一个协程在加锁，没有其他协程干扰</li><li>加锁国产中会判断Locked是否为0，如果是0则把Locked位置1，代表加锁成功，其他状态为不变</li></ul></li><li><p>加锁被阻塞</p><ul><li>假定加锁时锁被其他协程占用了，当对一个已被占用的锁再次加锁时，waiter 计数器加1，此时改协程阻塞，知道Locked值变为0才会被唤醒</li></ul></li><li><p>简单解锁</p><ul><li>假定解锁是没有其他协程阻塞，此时只需要把Locked 位置为0即可</li></ul></li><li><p>解锁并唤醒协程</p><ul><li>假定解锁时有一个或多个协程阻塞，解锁过程分为两个步骤。一是把Locked位置为0，而是查看到Waiter&gt;0, 释放一个信号量，唤醒一个阻塞的协程，被唤醒的协程把Locked位置1，于是该协程获得锁。</li></ul></li><li><p>自旋过程</p><blockquote><p>加锁时，如果当前Locked位为1，则说明锁被其他协程持有，尝试加锁的协程并不是马上转入阻塞，而是会持续探测Locked为是否变为0，这个过程为自旋过程。</p><p>自旋的时间很短，如果在自旋过程中发现锁已释放，则协程可以立即获得锁。此时即便有西城被唤醒也无法获取锁，只能再次阻塞。</p><p>自旋的好处是，当加锁失败时不必立即转入阻塞，有一定机会获得锁，这样可以避免协程的切换。</p></blockquote><ul><li><p>什么是自旋</p><blockquote><p>自旋对应CPU的PAUSE指令，该指令什么都不做，相当于CPU空转，对程序而言相当于“sleep”了一小段时间，当前实现是30个时钟周期。</p><p>自旋过程会持续探测Locked位是否变为0，连续两次探测间隔就是在执行这些PAUSE指令</p></blockquote></li><li><p>自旋条件</p><blockquote><p>加锁时 程序会自动判断是否可以自旋。判断条件如下：</p><ul><li>自旋次数要足够少，通常位4</li><li>CPU核数要大于1，否则自旋么有意义，因为此时不可能有其他协程释放锁</li><li>协程调度机制中的Process要大于1</li><li>协程调度机制中的可运行队列必须位空，否则会延迟协程调度</li></ul></blockquote></li><li><p>自旋的优势</p><blockquote><p>可以更充分的利用CPU，尽量避免协程切换。因为申请加锁的协程拥有CPU，如果经过短时间的自旋可以获得锁，则不必进入阻塞状态。</p></blockquote></li><li><p>自旋的问题</p><blockquote><p>如果自旋过程中获得锁，那么之前被阻塞的协程将无法获得锁。如果加锁的协程特别多，那么之前阻塞的进程将很难获得锁，从未进入饥饿状态。</p><p>为了避免协程长时间无法获取锁，自1.8版本增加了一个状态，即Mutex的Straving状态，在这个状态下不会自旋，一旦有协程释放锁，那么一定会唤醒一个协程并成功加锁。</p></blockquote></li></ul></li></ul></li><li><p>Mutex的模式</p><ul><li><p>每个Mutex都有两种模式，成为Normal和Straving。</p><ul><li><p>Normal模式：</p><blockquote><p>默认模式，在该模式下，协程如果加锁不成功，会判断是否满足自旋条件，如果满足则启动自旋过程</p></blockquote></li><li><p>Straving模式：</p><blockquote><p>自旋过程中能抢到锁，一定意味着同一时刻有协程释放了锁。我们知道释放锁时如果发现有阻塞的协程，会释放一个信号量来唤醒一个等待协程，被唤醒的协程得到CPU后开始运行，此时发现锁已经被抢占了，只能再次阻塞，不过阻塞前会判断自上次阻塞到本次阻塞经过了多长时间，如果超过1ms，则会将Mutex标记为“饥饿”模式，然后阻塞。</p><p>在“饥饿”模式下，不会启动字段过程，即一旦有协程释放了锁，那么一定会唤醒协程，被唤醒的协程将获得锁，同时等到计数减1.</p></blockquote></li></ul></li></ul></li><li><p>Woken状态</p><ul><li>Woken状态被用于加锁和解锁过程中的通信。举个例子，同一时刻，两个协程一个在加锁，另一个在解锁，在加锁的协程可能在自旋过程，此时把Woken标记为1，用于通知解锁协程不必释放信号量</li></ul></li><li><p>为什么重复解锁要触发panic</p><blockquote><p>Unlock分为将Locked置为0和判断Waiter值两个过程。如果值大于0，则释放信号量。</p><p>如果多次执行Unlock，那么可能每次释放一个信号量，这样会唤醒多个协程，多个协程唤醒后会继续在Lock的逻辑中抢锁，势必增加Lock实现的复杂度，也会引起不必要的协程切换。</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;互斥锁是在并发程序中对共享资源进行访问控制的主要手段，对此go 语言提供了Mutex，Mutex为一结构体类型，对外暴露Lock() 和 Unlock() 两个方法，分别用于加锁和解锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Mut</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>mysql总结</title>
    <link href="http://example.com/58301/"/>
    <id>http://example.com/58301/</id>
    <published>2022-01-17T08:26:31.000Z</published>
    <updated>2022-01-17T10:10:17.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql-学习总结"><a href="#mysql-学习总结" class="headerlink" title="mysql 学习总结"></a>mysql 学习总结</h3><ol><li>一条SQL 查询语句是如何执行的</li></ol><blockquote><ol><li>Mysql 客户端雨服务端建立连接，客户端发送一条查询语句给服务器；</li><li>服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果；否则进行下一步；</li><li>服务器端进行sql解析、预处理、生成合法的解析树；</li><li>由优化器生成对应的执行计划；</li><li>mysql根据优化器生成的执行计划，调用相应的存储引擎的 api 来执行，并将执行结果返回给客户端。</li></ol></blockquote><ol start="2"><li>InnoDB 存储引擎支持以下几种索引：<ul><li>B+ 树索引：<strong>B+ 树是为磁盘或其他直接存取辅助设备设计的一种平衡查找树。在 B+ 树中，所有记录节点都是按键值的大小顺序存放在同一层的叶子节点上，各叶子节点之间通过双向链表进行连接。</strong></li><li>全文索引</li><li>哈希索引：哈希索引的缺点是无法进行范围查询</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;mysql-学习总结&quot;&gt;&lt;a href=&quot;#mysql-学习总结&quot; class=&quot;headerlink&quot; title=&quot;mysql 学习总结&quot;&gt;&lt;/a&gt;mysql 学习总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一条SQL 查询语句是如何执行的&lt;/li&gt;
&lt;/ol&gt;
&lt;blo</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="http://example.com/61267/"/>
    <id>http://example.com/61267/</id>
    <published>2022-01-14T09:10:45.000Z</published>
    <updated>2022-01-14T10:46:34.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><blockquote><p>由于go本身没有构造函数，一般我们使用<code>NewName</code>的方式创建对象/接口, 当它返回的是一个接口时，其实就是简单工厂模式。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RuleParser <span class="keyword">interface</span> &#123;</span><br><span class="line">Parse(data []<span class="keyword">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> jsonParse <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j jsonParse)</span> <span class="title">Parse</span><span class="params">(data []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;json parse&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> yamlParse <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(y yamlParse)</span> <span class="title">Parse</span><span class="params">(data []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;yaml parse&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRuleParser</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">RuleParser</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> s &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;json&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> jsonParse&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;yaml&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> yamlParse&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><blockquote><p>当对象的创建逻辑笔记复杂，需要组合其他对象，做很多初始化操作时，推荐使用工厂方法模式，将复杂的创建逻辑拆分到多个工厂类中，让每个工厂类保持简单。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RuleParserFactory <span class="keyword">interface</span> &#123;</span><br><span class="line">CreateParser() RuleParser</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> yamlParserFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(y yamlParserFactory)</span> <span class="title">CreateParser</span><span class="params">()</span> <span class="title">RuleParser</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> yamlParse&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> jsonParserFactory <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j jsonParserFactory)</span> <span class="title">CreateParser</span><span class="params">()</span> <span class="title">RuleParser</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> jsonParse&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\\ 返回一个工厂接口</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRuleParserFactory</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">RuleParserFactory</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> s &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;json&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> jsonParserFactory&#123;&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;yaml&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> yamlParserFactory&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><blockquote><p>在工厂方法模式中，我们通过一个工厂对象创建一个产品，具体创建哪个产品，则通过 <code>switch</code> 语句的方式来判断。之后如果需要新增一类产品对象。必须修改原来工厂对象的代码。而且随着产品的不断增多，工厂对象的职责也越来越重，违反了单一职责原则。</p></blockquote><blockquote><p>抽象工厂模式通过给工厂类新增一个抽象层来解决该问题。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot; title=&quot;简单工厂&quot;&gt;&lt;/a&gt;简单工厂&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于go本身没有构造函数，一般我们使用&lt;code&gt;NewName&lt;/code&gt;的方式创建对象/接口</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang设计模式-观察者模式</title>
    <link href="http://example.com/11081/"/>
    <id>http://example.com/11081/</id>
    <published>2022-01-14T08:32:29.000Z</published>
    <updated>2022-01-18T07:44:44.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote><p>一个对象的改变会触发其他观察者相应的动作，而此对象无需关系联动对象的具体实现。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ISubject <span class="keyword">interface</span> &#123;</span><br><span class="line">Register(observer IObserver)</span><br><span class="line">Remove(observer IObserver)</span><br><span class="line">Notify(msg <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IObserver <span class="keyword">interface</span> &#123;</span><br><span class="line">Accept(msg <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Subject <span class="keyword">struct</span> &#123;</span><br><span class="line">observers []IObserver</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register 注册观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">Register</span><span class="params">(observer IObserver)</span></span> &#123;</span><br><span class="line">s.observers = <span class="built_in">append</span>(s.observers, observer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove 移除观察者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">Remove</span><span class="params">(observer IObserver)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, obj := <span class="keyword">range</span> s.observers &#123;</span><br><span class="line"><span class="keyword">if</span> obj == observer &#123;</span><br><span class="line">s.observers = <span class="built_in">append</span>(s.observers[:i], s.observers[i+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notify 通知消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Subject)</span> <span class="title">Notify</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> s.observers &#123;</span><br><span class="line">obj.Accept(msg)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个对象的改变会触发其他观察者相应的动作，而此对象无需关系联动对象的具体实现。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang设计模式笔记-单例模式</title>
    <link href="http://example.com/1287/"/>
    <id>http://example.com/1287/</id>
    <published>2022-01-13T02:47:34.000Z</published>
    <updated>2022-01-13T03:56:14.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>单例模式是常用的一种设计模式，使用该模式目的是保证单例对象的类只有一个实例存在。我们可以利用Go语言<code>package</code>的访问规则来实现，将单例结构体设计成首字母小写，就能限定其访问范围只在当前package下，模拟了C++/Java中的私有构造函数。</p></blockquote><p>有以下几种实现：</p><ol><li>懒汉模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> example <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个私有变量，作为单例</span></span><br><span class="line"><span class="keyword">var</span> instance *example</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">example</span></span> &#123;</span><br><span class="line"><span class="comment">// 暴露一个方法，给外部获取实例</span></span><br><span class="line"><span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">instance = <span class="built_in">new</span>(example)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉模式存在线程安全问题，如果有多个线程同时调用获取实例方法，有可能会创建多个对象。</p><ol start="2"><li>饿汉模式</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> example2 <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个私有变量，作为单例</span></span><br><span class="line"><span class="keyword">var</span> instance2 *example2</span><br><span class="line"></span><br><span class="line"><span class="comment">// init函数将在包初始化时执行，实例化单例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  instance2 = <span class="built_in">new</span>(example2)</span><br><span class="line">  instance2.name = <span class="string">&quot;初始化单例模式&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance2</span><span class="params">()</span> *<span class="title">example2</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> instance2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  s := GetInstance2()</span><br><span class="line">  fmt.Println(s.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉模式在包加载的时候创建单例对象，当程序中用不到该对象时，浪费了一部分空间。和懒汉模式相比，更安全，但会减慢程序启动速度。</p><ol start="3"><li>双重检查机制</li></ol><p>懒汉模式存在线程安全问题，一般我们使用互斥锁来解决。但是每一次请求单例时，都会加锁和去锁。而锁的用处只在解决对象初始化对的时候可能出现的并发问题。当对象创建之后，加锁就没有意义了。所以引入了双重检查机制。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">example</span></span> &#123;</span><br><span class="line"><span class="comment">// 暴露一个方法，给外部获取实例</span></span><br><span class="line"><span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">mux.Lock()</span><br><span class="line"><span class="keyword">defer</span> mux.Unlock()</span><br><span class="line">    <span class="keyword">if</span> instance == <span class="literal">nil</span> &#123;</span><br><span class="line">      instance = <span class="built_in">new</span>(example)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是又出现了一个问题：每次访问都要检查两次。为了解决这个问题，我们可以使用标准包中的方法进行原子操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialized <span class="keyword">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance</span><span class="params">()</span> *<span class="title">example</span></span> &#123;</span><br><span class="line">  <span class="comment">// 一次判断即可返回</span></span><br><span class="line">  <span class="keyword">if</span> atomic.LoadUInt32(&amp;initialized) == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">  mux.Lock()</span><br><span class="line">  <span class="keyword">defer</span> mux.Unlock()</span><br><span class="line">  <span class="keyword">if</span> initialized == <span class="number">0</span> &#123;</span><br><span class="line">    instance = &amp;example&#123;&#125;</span><br><span class="line">    atomic.StoreUint32(&amp;initialized, <span class="number">1</span>) <span class="comment">// 原子装载</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码只需要一次判断即可，标准包中提供了相关的方法：</p><p><code>sync.Once</code> 的 <code>Do</code> 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> example3 <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance3 *example3</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInstance3</span><span class="params">()</span> *<span class="title">example3</span></span> &#123;</span><br><span class="line">  once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    instance3 = <span class="built_in">new</span>(example3)</span><br><span class="line">    instance3.name = <span class="string">&quot;第一次赋值单例&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> instance3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;单例模式是常用的一种设计模式，使用该模式目的是保证单例对象的类只有一个实例存在。我们可以利用Go语</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>rust学习笔记-function</title>
    <link href="http://example.com/60033/"/>
    <id>http://example.com/60033/</id>
    <published>2021-11-17T14:17:16.000Z</published>
    <updated>2021-11-23T15:26:18.967Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn another_function()&#123;</span></span><br><span class="line"><span class="comment">//     println!(&quot;another function&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn five() -&gt; i32 &#123;</span></span><br><span class="line"><span class="comment">//     5</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn plus_one(x:i32) -&gt; i32&#123;</span></span><br><span class="line"><span class="comment">//     x+1 // 该行如果加上分号，会变成语句，导致函数没有返回值，rust 默认返回一个空元组（），与定义的返回值类型不匹配</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// println!(&quot;Hello, world!&quot;);</span></span><br><span class="line">    <span class="comment">// another_function();</span></span><br><span class="line">    <span class="comment">// let x = five();</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of x is：&#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let y = plus_one(5);</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of y is: &#123;&#125;&quot;, y);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let number = 3;</span></span><br><span class="line">    <span class="comment">// if number &lt;5&#123;</span></span><br><span class="line">    <span class="comment">//     println!(&quot;condition was true&quot;);</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     println!(&quot;condition was false&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let condition = true;</span></span><br><span class="line">    <span class="comment">// let number = if condition &#123;</span></span><br><span class="line">    <span class="comment">//     5</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     &quot;six&quot;    // if 和 else 分支产生的值类型需要相同，因为变量只能拥有单一的类型，所以无法通过编译</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;the value of number is:&#123;&#125;&quot;, number)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="rust" scheme="http://example.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust学习笔记-string</title>
    <link href="http://example.com/64508/"/>
    <id>http://example.com/64508/</id>
    <published>2021-11-17T14:16:05.000Z</published>
    <updated>2021-11-23T15:26:18.970Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于字符串字面量而言，将硬编码直接嵌入了最终可执行文件中，所以能够高效访问，</span></span><br><span class="line"><span class="comment">// 但是我们不能将未知大小的文本编码在二进制文件中。对于String类型而言，为了支持一个可变的、可增长的文本类型，</span></span><br><span class="line"><span class="comment">// 我们需要在堆上分配一块再编译时未知大小的内存来存放数据。这意味着：</span></span><br><span class="line"><span class="comment">// 1. 我们使用的内存是由操作系统在运行时动态分配的</span></span><br><span class="line"><span class="comment">// 2. 当使用完 String 时，我们需要通过某种方式来将这些内存归还给操作系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// rust 提供了另一套解决方案：内存会自动再拥有它的变量离开作用域后进行释放</span></span><br><span class="line"><span class="comment">// rust 会在作用域结束的地方（`&#125;`）处自动调用 drop 函数，释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// 所有权规则</span></span><br><span class="line"><span class="comment">// - rust中的每一个值都有一个对应的变量作为它的所有者</span></span><br><span class="line"><span class="comment">// - 在同一时间内，值有且仅有一个所有者</span></span><br><span class="line"><span class="comment">// - 当所有者离开自己的作用域，它持有的值就会被释放掉</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;Hello&quot;); // 调用置于String命名空间下的 from 函数</span></span><br><span class="line">    <span class="comment">// s.push_str(&quot;, world!&quot;); // push_str() 向String空间的尾部添加一段字面量</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, s);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// move， 默认类似于浅拷贝，但是会自动释放前一个变量</span></span><br><span class="line">    <span class="comment">// let s1 = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// let _s2 = s1;</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;, world!&quot;, s1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要深度拷贝 String 堆上的数据，可以使用clone方法</span></span><br><span class="line">    <span class="comment">// let s1 = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// let s2 = s1.clone();</span></span><br><span class="line">    <span class="comment">// println!(&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;, s1, s2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// rust 提供了一个名为 Copy 的 trait， 它可以用于整数这类完全存储在栈上的数据类型。</span></span><br><span class="line">    <span class="comment">// 一旦某种类型拥有了 Copy 这种 trait，那么它的变量就可以在赋值给其他变量之后保持可用性</span></span><br><span class="line">    <span class="comment">// 如果一种类型本身或这种类型的任意成员实现了 Drop 这种 trait，那么rust不允许其实现 Copy 这种 trait。</span></span><br><span class="line">    <span class="comment">// 一般来说，任何简单标量的组合类型都可以是 Copy 的，任何需要分配内存或某种资源的类型都不会是 Copy 的，下面是一些拥有 Copy 的类型：</span></span><br><span class="line">    <span class="comment">// 1. 所有的中暑类型。诸如 u32</span></span><br><span class="line">    <span class="comment">// 2. 仅拥有两种值的 bool类型</span></span><br><span class="line">    <span class="comment">// 3. 字符类型（char）</span></span><br><span class="line">    <span class="comment">// 4. 浮点类型，f64</span></span><br><span class="line">    <span class="comment">// 5. 如果一个元组的所有字段的类型都是可Copy的，那么这个元组也是可Copy的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把值传递给函数在语义上类似于对变量进行赋值，将变量传递给函数会触发移动或复制，就像是赋值语句一样。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量所有权转移总是遵循相同的模式：将一个值复制给另一个变量时就会转移所有权。</span></span><br><span class="line">    <span class="comment">// 当一个持有堆数据的变量离开作用域时，它的数据就会被drop清理回收，除非这些数据的所有权移动到了另一个变量上。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 引用 &amp; 可以允许你在不获取所有权的前提下使用值， `*`操作成为解引用</span></span><br><span class="line">    <span class="comment">// 与变量类似，引用是默认不可变的，rust 不允许我们去修改引用指向的值。</span></span><br><span class="line">    <span class="comment">// 可变引用：&amp;mut String。可变引用是在使用上有一个很大的限制：对于特定作用域的特定数据，一次只能声明一个可变引用。这个限制可以帮助我们在编译时避免数据竞争。</span></span><br><span class="line">    <span class="comment">// 与大部分语言类似，我们可以通过花括号来创建一个新的作用域，这就使我们可以创建多个可变引用。</span></span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     let r1 = &amp;mut s;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// let r2 = &amp;mut s;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 在结合使用可变引用与不可变引用时，还有另外一条类似的限制规则，它会导致下面的代码编译失败：</span></span><br><span class="line">    <span class="comment">// 不能在拥有不可变引用的同时创建可变引用</span></span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;hello&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let r1 = &amp;s;</span></span><br><span class="line">    <span class="comment">// let r2 = &amp;s;</span></span><br><span class="line">    <span class="comment">// let r3 = &amp;mut s;</span></span><br><span class="line">    <span class="comment">// println!(&quot;r1:&#123;&#125;, r2:&#123;&#125;, r3:&#123;&#125;&quot;, r1, r2, r3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 悬垂引用</span></span><br><span class="line">    <span class="comment">// let reference_to_nothing = dangle();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dangle() 内部创建的s，尝试返回一个指向s 的引用，rust会检测并拦截，解决方法可以直接返回 String，转移所有权到函数外部</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 引用的规则：</span></span><br><span class="line">    <span class="comment">// 在任何一段给定的时间里，你要么只能拥有一个可变引用，要么只能拥有任意数量的不可变引用。</span></span><br><span class="line">    <span class="comment">// 引用总是有效的</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切片：除引用外，另一种不持有所有权的数据类型：切片允许我们引用集合中的某一段连续的元素序列。</span></span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, first_word(&amp;s1));</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, first_word(&amp;s1[..]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let s = String::from(&quot;hello world&quot;);</span></span><br><span class="line">    <span class="comment">// let hello = &amp;s[0..5];</span></span><br><span class="line">    <span class="comment">// let world = &amp;s[6..11];</span></span><br><span class="line">    <span class="comment">// println!(&quot;1:&#123;&#125;, 2:&#123;&#125;&quot;, hello, world);</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借用规则： 当我们拥有了某个变量的不可变引用时，我们就无法同时获取改变量的可变引用。</span></span><br><span class="line">    <span class="comment">// 字符串字面量就是切片。</span></span><br><span class="line">    <span class="comment">// 这里变量 s 的类型就是 &amp;str：它是一个指向二进制程序特定位置的切片。正是由于 &amp;str 是一个不可变引用，所以字符串字面量才是不可变的</span></span><br><span class="line">    <span class="comment">// let s = &quot;hello&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他类型的切片</span></span><br><span class="line">    <span class="comment">// let s = [1,2,3,4,5];</span></span><br><span class="line">    <span class="comment">// let slice = &amp;s[1..3];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总结：</span></span><br><span class="line">    <span class="comment">// 所有权、借用和切片的概念是 rust 可以在编译时保证内存安全的关键所在。像其他系统级语言一样，rust 给予了程序员完善的内存使用控制能力。</span></span><br><span class="line">    <span class="comment">// 除此之外，借助于本章学习的工具，rust 还能自动清楚那些离开了作用域的数据。这几大地减轻了使用者的心智负担。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn dangle() -&gt; &amp;String &#123;</span></span><br><span class="line"><span class="comment">//     let s = String::from(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//     &amp;s</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn no_dangle() -&gt; String &#123;</span></span><br><span class="line"><span class="comment">//     let s = String::from(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//     s</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回第一个单词对应字符串的索引</span></span><br><span class="line"><span class="comment">// fn first_word(s: &amp;String) -&gt; usize &#123;</span></span><br><span class="line"><span class="comment">//     let bytes = s.as_bytes();   // 把 String 转换成字节数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     for (i, &amp;item) in bytes.iter().enumerate()&#123;</span></span><br><span class="line"><span class="comment">//         if item == b&#x27; &#x27;&#123;</span></span><br><span class="line"><span class="comment">//             return i;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     s.len()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数签名 参数 &amp;String 改为 &amp;str，可以同时处理 String 和 &amp;str：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate()&#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="rust" scheme="http://example.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust学习笔记-struct</title>
    <link href="http://example.com/24696/"/>
    <id>http://example.com/24696/</id>
    <published>2021-11-17T14:14:34.000Z</published>
    <updated>2021-11-23T15:26:18.969Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体是一种自定义的数据类型。它允许我们命名多个相关的值并将它们组成一个有机的结合体。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// struct User &#123;</span></span><br><span class="line"><span class="comment">//     username: String,</span></span><br><span class="line"><span class="comment">//     email: String,</span></span><br><span class="line"><span class="comment">//     sign_in_count: u64,</span></span><br><span class="line"><span class="comment">//     active: bool,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以和其他表达式一样，在函数体最后一个表达式中构造结构体实例，来隐式的将这个实例作为结果返回</span></span><br><span class="line"><span class="comment">// fn build_user(email: String, username: String) -&gt; User &#123;</span></span><br><span class="line"><span class="comment">//     User &#123;</span></span><br><span class="line"><span class="comment">//         email,</span></span><br><span class="line"><span class="comment">//         username,</span></span><br><span class="line"><span class="comment">//         active: true,</span></span><br><span class="line"><span class="comment">//         sign_in_count: 1,</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 结构体实例一旦可变，那么实例中所有字段都是可变的</span></span><br><span class="line">    <span class="comment">// let mut user1 = User &#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;someone@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;someone123&quot;),</span></span><br><span class="line">    <span class="comment">//     sign_in_count: 1,</span></span><br><span class="line">    <span class="comment">//     active: true,</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// user1.email = String::from(&quot;anotheremail@example.com&quot;);</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;,</span></span><br><span class="line">    <span class="comment">//     user1.username, user1.email, user1.sign_in_count, user1.active</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以在不使用更新语法的前提下创建新的User实例</span></span><br><span class="line">    <span class="comment">// let user2 = User&#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;another@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;anotherusername567&quot;),</span></span><br><span class="line">    <span class="comment">//     sign_in_count: user1.sign_in_count,</span></span><br><span class="line">    <span class="comment">//     active: user1.active,</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let user2 = User &#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;another@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;anotherusername567&quot;),</span></span><br><span class="line">    <span class="comment">//     ..user1</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;,</span></span><br><span class="line">    <span class="comment">//     user2.username, user2.email, user2.sign_in_count, user2.active</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用不需要对字段命名的元组结构体来创建不同的类型</span></span><br><span class="line">    <span class="comment">// struct Color(i32, i32, i32);</span></span><br><span class="line">    <span class="comment">// struct Point(i32, i32, i32);</span></span><br><span class="line">    <span class="comment">// let black = Color(0, 0, 0);</span></span><br><span class="line">    <span class="comment">// let origin = Point(0, 0, 0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust 允许我们创建没有任何字段的结构体。因为这种结构体与空元组（）十分相似，所以也被成为空结构体。</span></span><br><span class="line">    <span class="comment">// 当你想在某些类型上实现一个trait，却不需要再改类型中存储任何数据时，空结构体可以发挥作用</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体所有权</span></span><br><span class="line">    <span class="comment">// 我们希望结构体实例拥有自身全部数据的所有权，在这种情况下，只要结构体是有效的，那么它携带的数据也是有效的。</span></span><br><span class="line">    <span class="comment">// 当然我们也可以在结构体中存储指向其他数据的引用，不过这需要用到 rust 中独有的生命周期功能。</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let width1 = 30;</span></span><br><span class="line">    <span class="comment">// let height1 = 50;</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;,</span></span><br><span class="line">    <span class="comment">//     area(width1, height1)</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// area 函数将长和宽作为两个参数，但这两个参数要组合在一起才能定义一个长方形，下面用元组来重构</span></span><br><span class="line">    <span class="comment">// let rect1 = (30, 50);</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;,</span></span><br><span class="line">    <span class="comment">//     area(rect1)</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组传参，可能会混淆参数顺序，某些情况造成错误，下面用结构体重构</span></span><br><span class="line">    <span class="keyword">let</span> rect = Rect &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// println!(&quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;, area(&amp;rect));</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过派生 trait 增加实用功能</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect is &#123;:#?&#125;&quot;</span>, rect);</span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;</span>, rect.area());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rect2 = Rect &#123;</span><br><span class="line">        width:<span class="number">10</span>, height: <span class="number">40</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect3 =Rect &#123;</span><br><span class="line">        width:<span class="number">60</span>, height:<span class="number">45</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;can rect1 hold rect2? &#123;&#125;&quot;</span>, rect.can_hold(&amp;rect2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;can rect1 hold rect3? &#123;&#125;&quot;</span>, rect.can_hold(&amp;rect3));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关联函数：不用接收self作为参数的函数。常常被用作构造器返回一个结构体的新实例</span></span><br><span class="line">    <span class="comment">// 调用方法如下：</span></span><br><span class="line">    <span class="keyword">let</span> sq = Rect::square(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, sq)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 derive 注解来派生 trait，可以为自定义类型增加许多有用的功能</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn area(width: u32, height: u32) -&gt; u32&#123;</span></span><br><span class="line"><span class="comment">//     width * height</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn area(dimensions:(u32, u32)) -&gt; u32 &#123;</span></span><br><span class="line"><span class="comment">//     dimensions.0 * dimensions.1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构体的不可变引用，因为我们希望借用结构体，而不是获取它的所有权</span></span><br><span class="line"><span class="comment">// fn area(rect: &amp;Rect) -&gt; u32 &#123;</span></span><br><span class="line"><span class="comment">//     rect.width * rect.height</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要获得数据的所有权，也不需要写入数据，所以使用借用即可。加入我们想在调用方法时改变实例的某些数据，那么第一个参数改为 &amp;mut self。</span></span><br><span class="line"><span class="comment">// 通常来说，将第一个参数标记为self并在调用过程中去的所有权的方法并不常见。这种技术有可能被用于那些需要将self转换为其他类型，且在转换后想要阻止调用者访问原始实例的场景。</span></span><br><span class="line"><span class="keyword">impl</span> Rect &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, rect2:&amp;Rect) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; rect2.width &amp;&amp; <span class="keyword">self</span>.height &gt; rect2.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rect&#123;</span><br><span class="line">        Rect &#123;width:size, height:size&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="rust" scheme="http://example.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>rust学习笔记-变量</title>
    <link href="http://example.com/14206/"/>
    <id>http://example.com/14206/</id>
    <published>2021-11-17T14:12:51.000Z</published>
    <updated>2021-11-23T15:26:18.969Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// let mut x = 5;</span></span><br><span class="line">    <span class="comment">// println!(&quot;The value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line">    <span class="comment">// x = 6;</span></span><br><span class="line">    <span class="comment">// println!(&quot;The value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let x = 5;</span></span><br><span class="line">    <span class="comment">// let x = x + 1;  // 变量隐藏 shadow</span></span><br><span class="line">    <span class="comment">// let x = x * 2;</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// shadow 不同于 mut， 可以对这个值执行一系列的变换操作，并允许这个变量在操作后保持不可变</span></span><br><span class="line">    <span class="comment">// 另一个区别在于：重复使用 let 会创建新变量，所以我们可以在不改变变量名称的同时改变其类型</span></span><br><span class="line">    <span class="comment">// let spaces = &quot;      &quot;;</span></span><br><span class="line">    <span class="comment">// let spaces = spaces.len();</span></span><br><span class="line">    <span class="comment">// println!(&quot;spaces length is &#123;&#125;&quot;, spaces);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复合类型</span></span><br><span class="line">    <span class="comment">// 1. 元组类型：固定长度，可以存放不同类型值</span></span><br><span class="line">    <span class="comment">// let tup:(i32, f64, u8) = (500, 6.4, 1);</span></span><br><span class="line">    <span class="comment">// 元组解构</span></span><br><span class="line">    <span class="comment">// let (_, y, _) = tup;</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of y is: &#123;&#125;&quot;, y);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用(.)来访问元组的值</span></span><br><span class="line">    <span class="comment">// let five_hundred = tup.0;</span></span><br><span class="line">    <span class="comment">// let six_point_four = tup.1;</span></span><br><span class="line">    <span class="comment">// let one = tup.2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;the element of tup is: &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, five_hundred, six_point_four, one)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 数组类型</span></span><br><span class="line">    <span class="comment">// 与元组不同的是，数组中的每一个元素都必须是相同的类型，rust 中的数组拥有固定的长度，一旦声明就不能随意改变大小。</span></span><br><span class="line">    <span class="comment">// 当想在栈上分配空间时，数组是一个非常有用的工具</span></span><br><span class="line">    <span class="comment">// rust 标准库提供了一个灵活的动态数组类型（vector），是一个类似于数组的集合解构，但它允许用户自由调整数组长度，类似go语言的数组和切片</span></span><br><span class="line">    <span class="keyword">let</span> a:[<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> first = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> second = a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, first, second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="rust" scheme="http://example.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>golang面试题</title>
    <link href="http://example.com/36466/"/>
    <id>http://example.com/36466/</id>
    <published>2021-04-13T14:46:45.000Z</published>
    <updated>2021-11-23T15:26:18.966Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h4><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489302&idx=1&sn=c787d1fa4546e12c7e55e880da73c91f&scene=21#wechat_redirect">Go 是传值还是传引用？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489195&idx=1&sn=a39c9703021e130606b228119d535d4a&scene=21#wechat_redirect">Go 面试官问我如何实现面向对象？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487749&idx=1&sn=6add61c0404fd6f1bdc434eed347f559&scene=21#wechat_redirect">Go 结构体和结构体指针调用有什么区别吗？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487140&idx=1&sn=36d12263308fd24c32e9f5327e73ba21&scene=21#wechat_redirect">Go new 和 make 是什么，差异在哪？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247488604&idx=1&sn=83219ea874b1345debc65904cd7f025a&scene=21#wechat_redirect">什么是协程，协程和线程的区别和联系？</a></p></li></ul><h4 id="调度模型"><a href="#调度模型" class="headerlink" title="调度模型"></a>调度模型</h4><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487503&idx=1&sn=bfc20f81a1c6059ca489733b31a2c63c&scene=21#wechat_redirect">GMP 模型，为什么要有 P？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487631&idx=1&sn=0c6d3e548573197e8281f622d8d5b0d7&scene=21#wechat_redirect">Go 结构体是否可以比较，为什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487643&idx=1&sn=f81b18a12ab156feebb9fc9329e1c8f4&scene=21#wechat_redirect">单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487486&idx=1&sn=aee9f99265fa8137e9d17e43c1ffb9ca&scene=21#wechat_redirect">进程、线程都有 ID，为什么 Goroutine 没有 ID？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487250&idx=1&sn=3004324a9d2ba99233c4af48843dba64&scene=21#wechat_redirect">Goroutine 数量控制在多少合适，会影响 GC 和调度？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487902&idx=1&sn=5e4a09b18f87eee416238c1e75a2f5ea&scene=21#wechat_redirect">详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487768&idx=1&sn=02ad5eb8619e1aa7a1835bb6b623caa4&scene=21#wechat_redirect">Goroutine 泄露的情况有哪些？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247488491&idx=1&sn=ec14ff3f26e8aaa923c0e0da17ee426b&scene=21#wechat_redirect">Go 在什么时候会抢占 P？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247491708&idx=1&sn=172b6fd9a2eab7b6eb00ffa46395f904&scene=21#wechat_redirect">会诱发 Goroutine 挂起的 27 个原因</a></p></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487434&idx=1&sn=02dcfd4c0edc0fec867e93fb2bd69061&scene=21#wechat_redirect">Go interface 的一个 “坑” 及原理分析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487366&idx=1&sn=a0b2d5bfdb8ea5294094b1e7c59dd674&scene=21#wechat_redirect">Go defer 万恶的闭包问题</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489045&idx=1&sn=197bda427246e16907c7b471a5dc0572&scene=21#wechat_redirect">为什么 Go map 和 slice 是非线程安全的？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489164&idx=1&sn=e56e5c9836cda40f3c95a39e2ba57dde&scene=21#wechat_redirect">Go sync.map 和原生 map 谁的性能好，为什么？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247491866&idx=1&sn=e20ee68678ac7d99a94759cc6d80f662&scene=21#wechat_redirect">为什么 Go map 的负载因子是 6.5？</a></p></li></ul><p><em><strong>摘自煎鱼大佬</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;基本理解&quot;&gt;&lt;a href=&quot;#基本理解&quot; class=&quot;headerlink&quot; title=&quot;基本理解&quot;&gt;&lt;/a&gt;基本理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc</summary>
      
    
    
    
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>python设计模式</title>
    <link href="http://example.com/47244/"/>
    <id>http://example.com/47244/</id>
    <published>2021-04-12T14:47:25.000Z</published>
    <updated>2021-11-23T15:26:18.968Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>rust学习笔记</title>
    <link href="http://example.com/27461/"/>
    <id>http://example.com/27461/</id>
    <published>2021-04-12T14:47:25.000Z</published>
    <updated>2021-11-23T15:26:18.969Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
