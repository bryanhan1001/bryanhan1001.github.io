<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang面试题</title>
    <url>/undefined/</url>
    <content><![CDATA[<h4 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h4><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489302&idx=1&sn=c787d1fa4546e12c7e55e880da73c91f&scene=21#wechat_redirect">Go 是传值还是传引用？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489195&idx=1&sn=a39c9703021e130606b228119d535d4a&scene=21#wechat_redirect">Go 面试官问我如何实现面向对象？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487749&idx=1&sn=6add61c0404fd6f1bdc434eed347f559&scene=21#wechat_redirect">Go 结构体和结构体指针调用有什么区别吗？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487140&idx=1&sn=36d12263308fd24c32e9f5327e73ba21&scene=21#wechat_redirect">Go new 和 make 是什么，差异在哪？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247488604&idx=1&sn=83219ea874b1345debc65904cd7f025a&scene=21#wechat_redirect">什么是协程，协程和线程的区别和联系？</a></p>
</li>
</ul>
<h4 id="调度模型"><a href="#调度模型" class="headerlink" title="调度模型"></a>调度模型</h4><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487503&idx=1&sn=bfc20f81a1c6059ca489733b31a2c63c&scene=21#wechat_redirect">GMP 模型，为什么要有 P？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487631&idx=1&sn=0c6d3e548573197e8281f622d8d5b0d7&scene=21#wechat_redirect">Go 结构体是否可以比较，为什么？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487643&idx=1&sn=f81b18a12ab156feebb9fc9329e1c8f4&scene=21#wechat_redirect">单核 CPU，开两个 Goroutine，其中一个死循环，会怎么样？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487486&idx=1&sn=aee9f99265fa8137e9d17e43c1ffb9ca&scene=21#wechat_redirect">进程、线程都有 ID，为什么 Goroutine 没有 ID？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487250&idx=1&sn=3004324a9d2ba99233c4af48843dba64&scene=21#wechat_redirect">Goroutine 数量控制在多少合适，会影响 GC 和调度？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487902&idx=1&sn=5e4a09b18f87eee416238c1e75a2f5ea&scene=21#wechat_redirect">详解 Go 程序的启动流程，你知道 g0，m0 是什么吗？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487768&idx=1&sn=02ad5eb8619e1aa7a1835bb6b623caa4&scene=21#wechat_redirect">Goroutine 泄露的情况有哪些？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247488491&idx=1&sn=ec14ff3f26e8aaa923c0e0da17ee426b&scene=21#wechat_redirect">Go 在什么时候会抢占 P？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247491708&idx=1&sn=172b6fd9a2eab7b6eb00ffa46395f904&scene=21#wechat_redirect">会诱发 Goroutine 挂起的 27 个原因</a></p>
</li>
</ul>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487434&idx=1&sn=02dcfd4c0edc0fec867e93fb2bd69061&scene=21#wechat_redirect">Go interface 的一个 “坑” 及原理分析</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247487366&idx=1&sn=a0b2d5bfdb8ea5294094b1e7c59dd674&scene=21#wechat_redirect">Go defer 万恶的闭包问题</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489045&idx=1&sn=197bda427246e16907c7b471a5dc0572&scene=21#wechat_redirect">为什么 Go map 和 slice 是非线程安全的？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247489164&idx=1&sn=e56e5c9836cda40f3c95a39e2ba57dde&scene=21#wechat_redirect">Go sync.map 和原生 map 谁的性能好，为什么？</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMDI4MDc1NA==&mid=2247491866&idx=1&sn=e20ee68678ac7d99a94759cc6d80f662&scene=21#wechat_redirect">为什么 Go map 的负载因子是 6.5？</a></p>
</li>
</ul>
<p><em><strong>摘自煎鱼大佬</strong></em></p>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>python设计模式</title>
    <url>/undefined/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>rust学习笔记</title>
    <url>/undefined/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>rust学习笔记-function</title>
    <url>/undefined/</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fn another_function()&#123;</span></span><br><span class="line"><span class="comment">//     println!(&quot;another function&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn five() -&gt; i32 &#123;</span></span><br><span class="line"><span class="comment">//     5</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn plus_one(x:i32) -&gt; i32&#123;</span></span><br><span class="line"><span class="comment">//     x+1 // 该行如果加上分号，会变成语句，导致函数没有返回值，rust 默认返回一个空元组（），与定义的返回值类型不匹配</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// println!(&quot;Hello, world!&quot;);</span></span><br><span class="line">    <span class="comment">// another_function();</span></span><br><span class="line">    <span class="comment">// let x = five();</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of x is：&#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let y = plus_one(5);</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of y is: &#123;&#125;&quot;, y);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let number = 3;</span></span><br><span class="line">    <span class="comment">// if number &lt;5&#123;</span></span><br><span class="line">    <span class="comment">//     println!(&quot;condition was true&quot;);</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     println!(&quot;condition was false&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let condition = true;</span></span><br><span class="line">    <span class="comment">// let number = if condition &#123;</span></span><br><span class="line">    <span class="comment">//     5</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     &quot;six&quot;    // if 和 else 分支产生的值类型需要相同，因为变量只能拥有单一的类型，所以无法通过编译</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;the value of number is:&#123;&#125;&quot;, number)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rust学习笔记-string</title>
    <url>/undefined/</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于字符串字面量而言，将硬编码直接嵌入了最终可执行文件中，所以能够高效访问，</span></span><br><span class="line"><span class="comment">// 但是我们不能将未知大小的文本编码在二进制文件中。对于String类型而言，为了支持一个可变的、可增长的文本类型，</span></span><br><span class="line"><span class="comment">// 我们需要在堆上分配一块再编译时未知大小的内存来存放数据。这意味着：</span></span><br><span class="line"><span class="comment">// 1. 我们使用的内存是由操作系统在运行时动态分配的</span></span><br><span class="line"><span class="comment">// 2. 当使用完 String 时，我们需要通过某种方式来将这些内存归还给操作系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// rust 提供了另一套解决方案：内存会自动再拥有它的变量离开作用域后进行释放</span></span><br><span class="line"><span class="comment">// rust 会在作用域结束的地方（`&#125;`）处自动调用 drop 函数，释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================================================================</span></span><br><span class="line"><span class="comment">// 所有权规则</span></span><br><span class="line"><span class="comment">// - rust中的每一个值都有一个对应的变量作为它的所有者</span></span><br><span class="line"><span class="comment">// - 在同一时间内，值有且仅有一个所有者</span></span><br><span class="line"><span class="comment">// - 当所有者离开自己的作用域，它持有的值就会被释放掉</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;Hello&quot;); // 调用置于String命名空间下的 from 函数</span></span><br><span class="line">    <span class="comment">// s.push_str(&quot;, world!&quot;); // push_str() 向String空间的尾部添加一段字面量</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, s);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// move， 默认类似于浅拷贝，但是会自动释放前一个变量</span></span><br><span class="line">    <span class="comment">// let s1 = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// let _s2 = s1;</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;, world!&quot;, s1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要深度拷贝 String 堆上的数据，可以使用clone方法</span></span><br><span class="line">    <span class="comment">// let s1 = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// let s2 = s1.clone();</span></span><br><span class="line">    <span class="comment">// println!(&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;, s1, s2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// rust 提供了一个名为 Copy 的 trait， 它可以用于整数这类完全存储在栈上的数据类型。</span></span><br><span class="line">    <span class="comment">// 一旦某种类型拥有了 Copy 这种 trait，那么它的变量就可以在赋值给其他变量之后保持可用性</span></span><br><span class="line">    <span class="comment">// 如果一种类型本身或这种类型的任意成员实现了 Drop 这种 trait，那么rust不允许其实现 Copy 这种 trait。</span></span><br><span class="line">    <span class="comment">// 一般来说，任何简单标量的组合类型都可以是 Copy 的，任何需要分配内存或某种资源的类型都不会是 Copy 的，下面是一些拥有 Copy 的类型：</span></span><br><span class="line">    <span class="comment">// 1. 所有的中暑类型。诸如 u32</span></span><br><span class="line">    <span class="comment">// 2. 仅拥有两种值的 bool类型</span></span><br><span class="line">    <span class="comment">// 3. 字符类型（char）</span></span><br><span class="line">    <span class="comment">// 4. 浮点类型，f64</span></span><br><span class="line">    <span class="comment">// 5. 如果一个元组的所有字段的类型都是可Copy的，那么这个元组也是可Copy的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把值传递给函数在语义上类似于对变量进行赋值，将变量传递给函数会触发移动或复制，就像是赋值语句一样。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量所有权转移总是遵循相同的模式：将一个值复制给另一个变量时就会转移所有权。</span></span><br><span class="line">    <span class="comment">// 当一个持有堆数据的变量离开作用域时，它的数据就会被drop清理回收，除非这些数据的所有权移动到了另一个变量上。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 引用 &amp; 可以允许你在不获取所有权的前提下使用值， `*`操作成为解引用</span></span><br><span class="line">    <span class="comment">// 与变量类似，引用是默认不可变的，rust 不允许我们去修改引用指向的值。</span></span><br><span class="line">    <span class="comment">// 可变引用：&amp;mut String。可变引用是在使用上有一个很大的限制：对于特定作用域的特定数据，一次只能声明一个可变引用。这个限制可以帮助我们在编译时避免数据竞争。</span></span><br><span class="line">    <span class="comment">// 与大部分语言类似，我们可以通过花括号来创建一个新的作用域，这就使我们可以创建多个可变引用。</span></span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;hello&quot;);</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     let r1 = &amp;mut s;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// let r2 = &amp;mut s;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 在结合使用可变引用与不可变引用时，还有另外一条类似的限制规则，它会导致下面的代码编译失败：</span></span><br><span class="line">    <span class="comment">// 不能在拥有不可变引用的同时创建可变引用</span></span><br><span class="line">    <span class="comment">// let mut s = String::from(&quot;hello&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let r1 = &amp;s;</span></span><br><span class="line">    <span class="comment">// let r2 = &amp;s;</span></span><br><span class="line">    <span class="comment">// let r3 = &amp;mut s;</span></span><br><span class="line">    <span class="comment">// println!(&quot;r1:&#123;&#125;, r2:&#123;&#125;, r3:&#123;&#125;&quot;, r1, r2, r3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    <span class="comment">// 悬垂引用</span></span><br><span class="line">    <span class="comment">// let reference_to_nothing = dangle();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// dangle() 内部创建的s，尝试返回一个指向s 的引用，rust会检测并拦截，解决方法可以直接返回 String，转移所有权到函数外部</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 引用的规则：</span></span><br><span class="line">    <span class="comment">// 在任何一段给定的时间里，你要么只能拥有一个可变引用，要么只能拥有任意数量的不可变引用。</span></span><br><span class="line">    <span class="comment">// 引用总是有效的</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切片：除引用外，另一种不持有所有权的数据类型：切片允许我们引用集合中的某一段连续的元素序列。</span></span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, first_word(&amp;s1));</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, first_word(&amp;s1[..]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let s = String::from(&quot;hello world&quot;);</span></span><br><span class="line">    <span class="comment">// let hello = &amp;s[0..5];</span></span><br><span class="line">    <span class="comment">// let world = &amp;s[6..11];</span></span><br><span class="line">    <span class="comment">// println!(&quot;1:&#123;&#125;, 2:&#123;&#125;&quot;, hello, world);</span></span><br><span class="line">    <span class="comment">// =================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 借用规则： 当我们拥有了某个变量的不可变引用时，我们就无法同时获取改变量的可变引用。</span></span><br><span class="line">    <span class="comment">// 字符串字面量就是切片。</span></span><br><span class="line">    <span class="comment">// 这里变量 s 的类型就是 &amp;str：它是一个指向二进制程序特定位置的切片。正是由于 &amp;str 是一个不可变引用，所以字符串字面量才是不可变的</span></span><br><span class="line">    <span class="comment">// let s = &quot;hello&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他类型的切片</span></span><br><span class="line">    <span class="comment">// let s = [1,2,3,4,5];</span></span><br><span class="line">    <span class="comment">// let slice = &amp;s[1..3];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总结：</span></span><br><span class="line">    <span class="comment">// 所有权、借用和切片的概念是 rust 可以在编译时保证内存安全的关键所在。像其他系统级语言一样，rust 给予了程序员完善的内存使用控制能力。</span></span><br><span class="line">    <span class="comment">// 除此之外，借助于本章学习的工具，rust 还能自动清楚那些离开了作用域的数据。这几大地减轻了使用者的心智负担。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn dangle() -&gt; &amp;String &#123;</span></span><br><span class="line"><span class="comment">//     let s = String::from(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//     &amp;s</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn no_dangle() -&gt; String &#123;</span></span><br><span class="line"><span class="comment">//     let s = String::from(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//     s</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回第一个单词对应字符串的索引</span></span><br><span class="line"><span class="comment">// fn first_word(s: &amp;String) -&gt; usize &#123;</span></span><br><span class="line"><span class="comment">//     let bytes = s.as_bytes();   // 把 String 转换成字节数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     for (i, &amp;item) in bytes.iter().enumerate()&#123;</span></span><br><span class="line"><span class="comment">//         if item == b&#x27; &#x27;&#123;</span></span><br><span class="line"><span class="comment">//             return i;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     s.len()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数签名 参数 &amp;String 改为 &amp;str，可以同时处理 String 和 &amp;str：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate()&#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rust学习笔记-struct</title>
    <url>/undefined/</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构体是一种自定义的数据类型。它允许我们命名多个相关的值并将它们组成一个有机的结合体。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// struct User &#123;</span></span><br><span class="line"><span class="comment">//     username: String,</span></span><br><span class="line"><span class="comment">//     email: String,</span></span><br><span class="line"><span class="comment">//     sign_in_count: u64,</span></span><br><span class="line"><span class="comment">//     active: bool,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以和其他表达式一样，在函数体最后一个表达式中构造结构体实例，来隐式的将这个实例作为结果返回</span></span><br><span class="line"><span class="comment">// fn build_user(email: String, username: String) -&gt; User &#123;</span></span><br><span class="line"><span class="comment">//     User &#123;</span></span><br><span class="line"><span class="comment">//         email,</span></span><br><span class="line"><span class="comment">//         username,</span></span><br><span class="line"><span class="comment">//         active: true,</span></span><br><span class="line"><span class="comment">//         sign_in_count: 1,</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 结构体实例一旦可变，那么实例中所有字段都是可变的</span></span><br><span class="line">    <span class="comment">// let mut user1 = User &#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;someone@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;someone123&quot;),</span></span><br><span class="line">    <span class="comment">//     sign_in_count: 1,</span></span><br><span class="line">    <span class="comment">//     active: true,</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// user1.email = String::from(&quot;anotheremail@example.com&quot;);</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;,</span></span><br><span class="line">    <span class="comment">//     user1.username, user1.email, user1.sign_in_count, user1.active</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以在不使用更新语法的前提下创建新的User实例</span></span><br><span class="line">    <span class="comment">// let user2 = User&#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;another@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;anotherusername567&quot;),</span></span><br><span class="line">    <span class="comment">//     sign_in_count: user1.sign_in_count,</span></span><br><span class="line">    <span class="comment">//     active: user1.active,</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let user2 = User &#123;</span></span><br><span class="line">    <span class="comment">//     email: String::from(&quot;another@example.com&quot;),</span></span><br><span class="line">    <span class="comment">//     username: String::from(&quot;anotherusername567&quot;),</span></span><br><span class="line">    <span class="comment">//     ..user1</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;,</span></span><br><span class="line">    <span class="comment">//     user2.username, user2.email, user2.sign_in_count, user2.active</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用不需要对字段命名的元组结构体来创建不同的类型</span></span><br><span class="line">    <span class="comment">// struct Color(i32, i32, i32);</span></span><br><span class="line">    <span class="comment">// struct Point(i32, i32, i32);</span></span><br><span class="line">    <span class="comment">// let black = Color(0, 0, 0);</span></span><br><span class="line">    <span class="comment">// let origin = Point(0, 0, 0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rust 允许我们创建没有任何字段的结构体。因为这种结构体与空元组（）十分相似，所以也被成为空结构体。</span></span><br><span class="line">    <span class="comment">// 当你想在某些类型上实现一个trait，却不需要再改类型中存储任何数据时，空结构体可以发挥作用</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结构体所有权</span></span><br><span class="line">    <span class="comment">// 我们希望结构体实例拥有自身全部数据的所有权，在这种情况下，只要结构体是有效的，那么它携带的数据也是有效的。</span></span><br><span class="line">    <span class="comment">// 当然我们也可以在结构体中存储指向其他数据的引用，不过这需要用到 rust 中独有的生命周期功能。</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let width1 = 30;</span></span><br><span class="line">    <span class="comment">// let height1 = 50;</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;,</span></span><br><span class="line">    <span class="comment">//     area(width1, height1)</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// area 函数将长和宽作为两个参数，但这两个参数要组合在一起才能定义一个长方形，下面用元组来重构</span></span><br><span class="line">    <span class="comment">// let rect1 = (30, 50);</span></span><br><span class="line">    <span class="comment">// println!(</span></span><br><span class="line">    <span class="comment">//     &quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;,</span></span><br><span class="line">    <span class="comment">//     area(rect1)</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 元组传参，可能会混淆参数顺序，某些情况造成错误，下面用结构体重构</span></span><br><span class="line">    <span class="keyword">let</span> rect = Rect &#123;</span><br><span class="line">        width: <span class="number">30</span>,</span><br><span class="line">        height: <span class="number">50</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// println!(&quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;, area(&amp;rect));</span></span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过派生 trait 增加实用功能</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect is &#123;:#?&#125;&quot;</span>, rect);</span><br><span class="line">    <span class="comment">// ================================================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the area of the rectangle is &#123;&#125; squrae pixels.&quot;</span>, rect.area());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rect2 = Rect &#123;</span><br><span class="line">        width:<span class="number">10</span>, height: <span class="number">40</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect3 =Rect &#123;</span><br><span class="line">        width:<span class="number">60</span>, height:<span class="number">45</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;can rect1 hold rect2? &#123;&#125;&quot;</span>, rect.can_hold(&amp;rect2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;can rect1 hold rect3? &#123;&#125;&quot;</span>, rect.can_hold(&amp;rect3));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关联函数：不用接收self作为参数的函数。常常被用作构造器返回一个结构体的新实例</span></span><br><span class="line">    <span class="comment">// 调用方法如下：</span></span><br><span class="line">    <span class="keyword">let</span> sq = Rect::square(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, sq)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 derive 注解来派生 trait，可以为自定义类型增加许多有用的功能</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn area(width: u32, height: u32) -&gt; u32&#123;</span></span><br><span class="line"><span class="comment">//     width * height</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn area(dimensions:(u32, u32)) -&gt; u32 &#123;</span></span><br><span class="line"><span class="comment">//     dimensions.0 * dimensions.1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构体的不可变引用，因为我们希望借用结构体，而不是获取它的所有权</span></span><br><span class="line"><span class="comment">// fn area(rect: &amp;Rect) -&gt; u32 &#123;</span></span><br><span class="line"><span class="comment">//     rect.width * rect.height</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要获得数据的所有权，也不需要写入数据，所以使用借用即可。加入我们想在调用方法时改变实例的某些数据，那么第一个参数改为 &amp;mut self。</span></span><br><span class="line"><span class="comment">// 通常来说，将第一个参数标记为self并在调用过程中去的所有权的方法并不常见。这种技术有可能被用于那些需要将self转换为其他类型，且在转换后想要阻止调用者访问原始实例的场景。</span></span><br><span class="line"><span class="keyword">impl</span> Rect &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, rect2:&amp;Rect) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt; rect2.width &amp;&amp; <span class="keyword">self</span>.height &gt; rect2.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rect&#123;</span><br><span class="line">        Rect &#123;width:size, height:size&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rust学习笔记-变量</title>
    <url>/undefined/</url>
    <content><![CDATA[<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// let mut x = 5;</span></span><br><span class="line">    <span class="comment">// println!(&quot;The value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line">    <span class="comment">// x = 6;</span></span><br><span class="line">    <span class="comment">// println!(&quot;The value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let x = 5;</span></span><br><span class="line">    <span class="comment">// let x = x + 1;  // 变量隐藏 shadow</span></span><br><span class="line">    <span class="comment">// let x = x * 2;</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of x is: &#123;&#125;&quot;, x);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// shadow 不同于 mut， 可以对这个值执行一系列的变换操作，并允许这个变量在操作后保持不可变</span></span><br><span class="line">    <span class="comment">// 另一个区别在于：重复使用 let 会创建新变量，所以我们可以在不改变变量名称的同时改变其类型</span></span><br><span class="line">    <span class="comment">// let spaces = &quot;      &quot;;</span></span><br><span class="line">    <span class="comment">// let spaces = spaces.len();</span></span><br><span class="line">    <span class="comment">// println!(&quot;spaces length is &#123;&#125;&quot;, spaces);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复合类型</span></span><br><span class="line">    <span class="comment">// 1. 元组类型：固定长度，可以存放不同类型值</span></span><br><span class="line">    <span class="comment">// let tup:(i32, f64, u8) = (500, 6.4, 1);</span></span><br><span class="line">    <span class="comment">// 元组解构</span></span><br><span class="line">    <span class="comment">// let (_, y, _) = tup;</span></span><br><span class="line">    <span class="comment">// println!(&quot;the value of y is: &#123;&#125;&quot;, y);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用(.)来访问元组的值</span></span><br><span class="line">    <span class="comment">// let five_hundred = tup.0;</span></span><br><span class="line">    <span class="comment">// let six_point_four = tup.1;</span></span><br><span class="line">    <span class="comment">// let one = tup.2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;the element of tup is: &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;, five_hundred, six_point_four, one)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 数组类型</span></span><br><span class="line">    <span class="comment">// 与元组不同的是，数组中的每一个元素都必须是相同的类型，rust 中的数组拥有固定的长度，一旦声明就不能随意改变大小。</span></span><br><span class="line">    <span class="comment">// 当想在栈上分配空间时，数组是一个非常有用的工具</span></span><br><span class="line">    <span class="comment">// rust 标准库提供了一个灵活的动态数组类型（vector），是一个类似于数组的集合解构，但它允许用户自由调整数组长度，类似go语言的数组和切片</span></span><br><span class="line">    <span class="keyword">let</span> a:[<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> first = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> second = a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, first, second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
</search>
